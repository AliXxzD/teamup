import { API_BASE_URL, API_ENDPOINTS, getAuthHeaders } from '../config/api';
import AsyncStorage from '@react-native-async-storage/async-storage';

/**
 * Service pour g√©rer tous les boutons de l'application
 * Bas√© sur le mod√®le qui fonctionne parfaitement dans DiscoverScreen
 */
class ButtonService {

  /**
   * Rejoindre un √©v√©nement (mod√®le de DiscoverScreen qui fonctionne)
   * @param {string} eventId - ID de l'√©v√©nement
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async joinEvent(eventId, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.joinEvent - D√âBUT DU CLIC');
      console.log('   - eventId:', eventId);
      console.log('   - onSuccess callback:', !!onSuccess);
      console.log('   - onError callback:', !!onError);
      console.log('   - Timestamp:', new Date().toISOString());
      
      const token = await AsyncStorage.getItem('accessToken');
      console.log('   - Token r√©cup√©r√©:', !!token);
      console.log('   - Token length:', token?.length || 0);
      
      if (!token) {
        console.log('‚ùå PAS DE TOKEN - Arr√™t de la fonction');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour rejoindre un √©v√©nement',
          isLoggedOut: true
        };
        console.log('   - Appel onError callback:', !!onError);
        if (onError) onError(error);
        return error;
      }

      // Utiliser exactement la m√™me approche que DiscoverScreen
      const url = `${API_BASE_URL}${API_ENDPOINTS.EVENTS.JOIN(eventId)}`;
      console.log('   - URL de l\'API:', url);
      console.log('   - Headers:', getAuthHeaders(token));
      
      console.log('üåê ENVOI DE LA REQU√äTE API...');
      const response = await fetch(url, {
        method: 'POST',
        headers: getAuthHeaders(token)
      });
      
      console.log('üìä R√âPONSE RE√áUE:');
      console.log('   - Status:', response.status);
      console.log('   - Status Text:', response.statusText);
      console.log('   - Headers:', Object.fromEntries(response.headers.entries()));
      
      const data = await response.json();
      console.log('üìä DONN√âES DE R√âPONSE:', data);

      if (data.success) {
        console.log('‚úÖ JOIN R√âUSSI !');
        const result = {
          success: true,
          data: data.data,
          message: data.message || 'Vous avez rejoint l\'√©v√©nement avec succ√®s'
        };
        console.log('   - R√©sultat de succ√®s:', result);
        console.log('   - Appel onSuccess callback:', !!onSuccess);
        if (onSuccess) {
          console.log('   - Ex√©cution du callback onSuccess...');
          onSuccess(result);
        }
        return result;
      } else {
        console.log('‚ùå JOIN √âCHOU√â:', data.message);
        const error = {
          success: false,
          error: data.message || 'Impossible de rejoindre l\'√©v√©nement'
        };
        console.log('   - R√©sultat d\'erreur:', error);
        console.log('   - Appel onError callback:', !!onError);
        if (onError) {
          console.log('   - Ex√©cution du callback onError...');
          onError(error);
        }
        return error;
      }

    } catch (error) {
      console.error('‚ùå ERREUR CRITIQUE joinEvent:', error);
      console.log('   - Type d\'erreur:', error.constructor.name);
      console.log('   - Message d\'erreur:', error.message);
      console.log('   - Stack trace:', error.stack);
      
      const errorResult = {
        success: false,
        error: 'Impossible de rejoindre l\'√©v√©nement',
        details: error.message
      };
      console.log('   - R√©sultat d\'erreur critique:', errorResult);
      console.log('   - Appel onError callback:', !!onError);
      if (onError) {
        console.log('   - Ex√©cution du callback onError...');
        onError(errorResult);
      }
      return errorResult;
    }
  }

  /**
   * Quitter un √©v√©nement
   * @param {string} eventId - ID de l'√©v√©nement
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async leaveEvent(eventId, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.leaveEvent - D√âBUT DU CLIC LEAVE');
      console.log('   - eventId:', eventId);
      console.log('   - onSuccess callback:', !!onSuccess);
      console.log('   - onError callback:', !!onError);
      console.log('   - Timestamp:', new Date().toISOString());
      
      const token = await AsyncStorage.getItem('accessToken');
      console.log('   - Token r√©cup√©r√©:', !!token);
      console.log('   - Token length:', token?.length || 0);
      
      if (!token) {
        console.log('‚ùå PAS DE TOKEN - Arr√™t de la fonction LEAVE');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour quitter un √©v√©nement',
          isLoggedOut: true
        };
        console.log('   - Appel onError callback:', !!onError);
        if (onError) onError(error);
        return error;
      }

      const url = `${API_BASE_URL}${API_ENDPOINTS.EVENTS.LEAVE(eventId)}`;
      console.log('   - URL de l\'API LEAVE:', url);
      console.log('   - Headers:', getAuthHeaders(token));
      
      console.log('üåê ENVOI DE LA REQU√äTE API LEAVE...');
      const response = await fetch(url, {
        method: 'POST',
        headers: getAuthHeaders(token)
      });
      
      console.log('üìä R√âPONSE LEAVE RE√áUE:');
      console.log('   - Status:', response.status);
      console.log('   - Status Text:', response.statusText);
      console.log('   - Headers:', Object.fromEntries(response.headers.entries()));
      
      const data = await response.json();
      console.log('üìä DONN√âES DE R√âPONSE LEAVE:', data);

      if (data.success) {
        console.log('‚úÖ LEAVE R√âUSSI !');
        const result = {
          success: true,
          data: data.data,
          message: data.message || 'Vous avez quitt√© l\'√©v√©nement avec succ√®s'
        };
        console.log('   - R√©sultat de succ√®s LEAVE:', result);
        console.log('   - Appel onSuccess callback:', !!onSuccess);
        if (onSuccess) {
          console.log('   - Ex√©cution du callback onSuccess LEAVE...');
          onSuccess(result);
        }
        return result;
      } else {
        console.log('‚ùå LEAVE √âCHOU√â:', data.message);
        const error = {
          success: false,
          error: data.message || 'Impossible de quitter l\'√©v√©nement'
        };
        console.log('   - R√©sultat d\'erreur LEAVE:', error);
        console.log('   - Appel onError callback:', !!onError);
        if (onError) {
          console.log('   - Ex√©cution du callback onError LEAVE...');
          onError(error);
        }
        return error;
      }

    } catch (error) {
      console.error('‚ùå ERREUR CRITIQUE leaveEvent:', error);
      console.log('   - Type d\'erreur:', error.constructor.name);
      console.log('   - Message d\'erreur:', error.message);
      console.log('   - Stack trace:', error.stack);
      
      const errorResult = {
        success: false,
        error: 'Impossible de quitter l\'√©v√©nement',
        details: error.message
      };
      console.log('   - R√©sultat d\'erreur critique LEAVE:', errorResult);
      console.log('   - Appel onError callback:', !!onError);
      if (onError) {
        console.log('   - Ex√©cution du callback onError LEAVE...');
        onError(errorResult);
      }
      return errorResult;
    }
  }

  /**
   * Cr√©er un √©v√©nement
   * @param {Object} eventData - Donn√©es de l'√©v√©nement
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async createEvent(eventData, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.createEvent - D√©but');
      console.log('   - eventData:', eventData);
      
      const token = await AsyncStorage.getItem('accessToken');
      
      if (!token) {
        console.log('‚ùå Pas de token');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour cr√©er un √©v√©nement',
          isLoggedOut: true
        };
        if (onError) onError(error);
        return error;
      }

      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.EVENTS.CREATE}`, {
        method: 'POST',
        headers: getAuthHeaders(token),
        body: JSON.stringify(eventData)
      });
      
      console.log('üìä Statut de cr√©ation:', response.status);
      const data = await response.json();
      console.log('üìä Donn√©es de r√©ponse:', data);

      if (data.success) {
        console.log('‚úÖ Create r√©ussi');
        const result = {
          success: true,
          data: data.data,
          message: data.message || '√âv√©nement cr√©√© avec succ√®s'
        };
        if (onSuccess) onSuccess(result);
        return result;
      } else {
        console.log('‚ùå Create √©chou√©:', data.message);
        const error = {
          success: false,
          error: data.message || 'Impossible de cr√©er l\'√©v√©nement'
        };
        if (onError) onError(error);
        return error;
      }

    } catch (error) {
      console.error('‚ùå Erreur createEvent:', error);
      const errorResult = {
        success: false,
        error: 'Impossible de cr√©er l\'√©v√©nement'
      };
      if (onError) onError(errorResult);
      return errorResult;
    }
  }

  /**
   * Modifier un √©v√©nement
   * @param {string} eventId - ID de l'√©v√©nement
   * @param {Object} eventData - Nouvelles donn√©es de l'√©v√©nement
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async updateEvent(eventId, eventData, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.updateEvent - D√©but');
      console.log('   - eventId:', eventId);
      console.log('   - eventData:', eventData);
      
      const token = await AsyncStorage.getItem('accessToken');
      
      if (!token) {
        console.log('‚ùå Pas de token');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour modifier un √©v√©nement',
          isLoggedOut: true
        };
        if (onError) onError(error);
        return error;
      }

      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.EVENTS.DETAILS(eventId)}`, {
        method: 'PUT',
        headers: getAuthHeaders(token),
        body: JSON.stringify(eventData)
      });
      
      console.log('üìä Statut de modification:', response.status);
      const data = await response.json();
      console.log('üìä Donn√©es de r√©ponse:', data);

      if (data.success) {
        console.log('‚úÖ Update r√©ussi');
        const result = {
          success: true,
          data: data.data,
          message: data.message || '√âv√©nement modifi√© avec succ√®s'
        };
        if (onSuccess) onSuccess(result);
        return result;
      } else {
        console.log('‚ùå Update √©chou√©:', data.message);
        const error = {
          success: false,
          error: data.message || 'Impossible de modifier l\'√©v√©nement'
        };
        if (onError) onError(error);
        return error;
      }

    } catch (error) {
      console.error('‚ùå Erreur updateEvent:', error);
      const errorResult = {
        success: false,
        error: 'Impossible de modifier l\'√©v√©nement'
      };
      if (onError) onError(errorResult);
      return errorResult;
    }
  }

  /**
   * Supprimer un participant d'un √©v√©nement
   * @param {string} eventId - ID de l'√©v√©nement
   * @param {string} participantId - ID du participant
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async removeParticipant(eventId, participantId, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.removeParticipant - D√©but');
      console.log('   - eventId:', eventId);
      console.log('   - participantId:', participantId);
      
      const token = await AsyncStorage.getItem('accessToken');
      
      if (!token) {
        console.log('‚ùå Pas de token');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour g√©rer les participants',
          isLoggedOut: true
        };
        if (onError) onError(error);
        return error;
      }

      const response = await fetch(`${API_BASE_URL}/api/events/${eventId}/participants/${participantId}`, {
        method: 'DELETE',
        headers: getAuthHeaders(token)
      });
      
      console.log('üìä Statut de suppression:', response.status);
      const data = await response.json();
      console.log('üìä Donn√©es de r√©ponse:', data);

      if (response.ok) {
        console.log('‚úÖ Remove participant r√©ussi');
        const result = {
          success: true,
          data: data,
          message: 'Participant retir√© de l\'√©v√©nement'
        };
        if (onSuccess) onSuccess(result);
        return result;
      } else {
        console.log('‚ùå Remove participant √©chou√©');
        const error = {
          success: false,
          error: 'Impossible de retirer le participant'
        };
        if (onError) onError(error);
        return error;
      }

    } catch (error) {
      console.error('‚ùå Erreur removeParticipant:', error);
      const errorResult = {
        success: false,
        error: 'Impossible de retirer le participant'
      };
      if (onError) onError(errorResult);
      return errorResult;
    }
  }

  /**
   * Cr√©er une conversation avec un organisateur
   * @param {string} eventId - ID de l'√©v√©nement
   * @param {Function} onSuccess - Callback de succ√®s
   * @param {Function} onError - Callback d'erreur
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  async createConversationWithOrganizer(eventId, onSuccess = null, onError = null) {
    try {
      console.log('üîÑ ButtonService.createConversationWithOrganizer - D√©but');
      console.log('   - eventId:', eventId);
      
      const token = await AsyncStorage.getItem('accessToken');
      
      if (!token) {
        console.log('‚ùå Pas de token');
        const error = {
          success: false,
          error: 'Connexion requise',
          message: 'Vous devez √™tre connect√© pour contacter l\'organisateur',
          isLoggedOut: true
        };
        if (onError) onError(error);
        return error;
      }

      const response = await fetch(`${API_BASE_URL}/api/messages/conversations/with-organizer`, {
        method: 'POST',
        headers: getAuthHeaders(token),
        body: JSON.stringify({ eventId })
      });
      
      console.log('üìä Statut de cr√©ation conversation:', response.status);
      const data = await response.json();
      console.log('üìä Donn√©es de r√©ponse:', data);

      if (data.success) {
        console.log('‚úÖ Create conversation r√©ussi');
        const result = {
          success: true,
          data: data.data,
          message: data.message || 'Conversation cr√©√©e avec succ√®s'
        };
        if (onSuccess) onSuccess(result);
        return result;
      } else {
        console.log('‚ùå Create conversation √©chou√©:', data.message);
        const error = {
          success: false,
          error: data.message || 'Impossible de cr√©er la conversation'
        };
        if (onError) onError(error);
        return error;
      }

    } catch (error) {
      console.error('‚ùå Erreur createConversationWithOrganizer:', error);
      const errorResult = {
        success: false,
        error: 'Impossible de cr√©er la conversation'
      };
      if (onError) onError(errorResult);
      return errorResult;
    }
  }
}

// Export d'une instance unique
const buttonService = new ButtonService();
export default buttonService;
