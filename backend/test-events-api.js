const express = require('express');
const request = require('supertest');
const mongoose = require('mongoose');
const User = require('./models/User');
const Event = require('./models/Event');
const jwt = require('jsonwebtoken');

require('dotenv').config();

async function testEventsAPI() {
  try {
    console.log('üîÑ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // R√©cup√©rer un utilisateur pour les tests
    const user = await User.findOne();
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√© pour les tests');
      return;
    }

    // Cr√©er un token JWT
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );

    console.log('üë§ Utilisateur de test:', user.email);

    // Cr√©er l'app Express pour les tests
    const app = express();
    app.use(express.json());
    
    // Importer les routes d'√©v√©nements
    const eventsRoutes = require('./routes/events');
    app.use('/api/events', eventsRoutes);

    console.log('\nüì° Test 1: GET /api/events (R√©cup√©rer tous les √©v√©nements)');
    
    try {
      const response = await request(app)
        .get('/api/events')
        .expect(200);
      
      console.log('‚úÖ Statut:', response.status);
      console.log('‚úÖ √âv√©nements r√©cup√©r√©s:', response.body.data?.events?.length || 0);
      
      if (response.body.data?.events && response.body.data.events.length > 0) {
        const event = response.body.data.events[0];
        console.log('   - Premier √©v√©nement:', event.title);
        console.log('   - Sport:', event.sport);
        console.log('   - Date:', event.date);
        console.log('   - Participants:', event.currentParticipants + '/' + event.maxParticipants);
      }
      
    } catch (apiError) {
      console.error('‚ùå Erreur API GET /api/events:', apiError.message);
    }

    console.log('\nüì° Test 2: GET /api/events avec filtres');
    
    try {
      const response = await request(app)
        .get('/api/events?sport=Football&isFree=true')
        .expect(200);
      
      console.log('‚úÖ √âv√©nements Football gratuits:', response.body.data?.events?.length || 0);
      
    } catch (apiError) {
      console.error('‚ùå Erreur API filtres:', apiError.message);
    }

    console.log('\nüì° Test 3: POST /api/events (Cr√©er un √©v√©nement)');
    
    try {
      const newEvent = {
        title: 'Tournoi de Tennis API Test',
        description: 'Un tournoi de tennis cr√©√© via l\'API pour tester le syst√®me. Tous niveaux bienvenus !',
        sport: 'Tennis',
        date: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(), // Dans 10 jours
        time: '10:00',
        location: 'Club de Tennis Municipal, Avenue des Sports',
        maxParticipants: 8,
        level: 'Tous niveaux',
        price: 15,
        isFree: false
      };

      const response = await request(app)
        .post('/api/events')
        .set('Authorization', `Bearer ${token}`)
        .send(newEvent)
        .expect(201);
      
      console.log('‚úÖ √âv√©nement cr√©√© avec succ√®s');
      console.log('   - ID:', response.body.data._id);
      console.log('   - Titre:', response.body.data.title);
      console.log('   - Organisateur:', response.body.data.organizer?.name);
      
      const createdEventId = response.body.data._id;

      // Test 4: GET /api/events/:id (R√©cup√©rer un √©v√©nement sp√©cifique)
      console.log('\nüì° Test 4: GET /api/events/:id');
      
      const detailResponse = await request(app)
        .get(`/api/events/${createdEventId}`)
        .expect(200);
      
      console.log('‚úÖ D√©tails de l\'√©v√©nement r√©cup√©r√©s');
      console.log('   - Titre:', detailResponse.body.data.title);
      console.log('   - Description:', detailResponse.body.data.description.substring(0, 50) + '...');
      console.log('   - Vues:', detailResponse.body.data.stats.views);

      // Test 5: POST /api/events/:id/join (Rejoindre un √©v√©nement)
      console.log('\nüì° Test 5: POST /api/events/:id/join');
      
      try {
        const joinResponse = await request(app)
          .post(`/api/events/${createdEventId}/join`)
          .set('Authorization', `Bearer ${token}`)
          .expect(400); // 400 car l'organisateur ne peut pas rejoindre son propre √©v√©nement
        
        console.log('‚úÖ Test de participation (organisateur):', joinResponse.body.message);
        
      } catch (joinError) {
        console.log('‚ÑπÔ∏è Erreur attendue - organisateur ne peut pas rejoindre:', joinError.message);
      }

      // Test 6: PUT /api/events/:id (Mettre √† jour un √©v√©nement)
      console.log('\nüì° Test 6: PUT /api/events/:id');
      
      const updatedEvent = {
        ...newEvent,
        title: 'Tournoi de Tennis API Test - MODIFI√â',
        maxParticipants: 12
      };

      const updateResponse = await request(app)
        .put(`/api/events/${createdEventId}`)
        .set('Authorization', `Bearer ${token}`)
        .send(updatedEvent)
        .expect(200);
      
      console.log('‚úÖ √âv√©nement mis √† jour');
      console.log('   - Nouveau titre:', updateResponse.body.data.title);
      console.log('   - Nouveaux participants max:', updateResponse.body.data.maxParticipants);

    } catch (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation:', createError.message);
      if (createError.response) {
        console.error('   - Statut:', createError.response.status);
        console.error('   - Corps:', createError.response.body);
      }
    }

    console.log('\n‚úÖ Tests API des √©v√©nements termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

testEventsAPI();
