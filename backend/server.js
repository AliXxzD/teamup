// ========================================
// IMPORTS ET CONFIGURATION INITIALE
// ========================================

// Framework web Express pour cr√©er l'API REST
const express = require('express');
// ODM (Object Document Mapper) pour MongoDB - permet d'interagir avec la base de donn√©es
const mongoose = require('mongoose');
// Middleware pour g√©rer les requ√™tes cross-origin (CORS) - permet aux apps mobiles d'acc√©der √† l'API
const cors = require('cors');
// Middleware de s√©curit√© pour prot√©ger l'API contre les attaques courantes
const helmet = require('helmet');
// Middleware pour limiter le nombre de requ√™tes par IP (protection contre les attaques DDoS)
const rateLimit = require('express-rate-limit');
// Module Node.js pour cr√©er un serveur HTTP
const { createServer } = require('http');
// Biblioth√®que Socket.io pour la communication temps r√©el (messagerie instantan√©e)
const { Server } = require('socket.io');
// Module pour g√©rer les sessions utilisateur (actuellement d√©sactiv√©)
// const session = require('express-session');
// Charge les variables d'environnement depuis le fichier .env
require('dotenv').config();

// ========================================
// IMPORTATION DES ROUTES ET SERVICES
// ========================================

// Routes pour l'authentification (login, register, logout, etc.)
const authRoutes = require('./routes/auth');
// Routes pour la gestion des √©v√©nements (cr√©ation, modification, suppression, etc.)
const eventRoutes = require('./routes/events');
// Routes pour la messagerie (envoi/r√©ception de messages)
const messageRoutes = require('./routes/messages');
// Routes pour la gestion des profils utilisateurs
const userRoutes = require('./routes/users');
// Service Socket.io pour la communication temps r√©el
const socketService = require('./services/socketService');

// Configuration Passport pour l'authentification OAuth (actuellement d√©sactiv√©)
// const passport = require('./config/passport');
// Fonctions utilitaires pour la base de donn√©es MongoDB
const { connectDB, initializeIndexes, cleanupDatabase } = require('./config/database');

// ========================================
// INITIALISATION DU SERVEUR
// ========================================

// Cr√©ation de l'application Express
const app = express();
// Cr√©ation du serveur HTTP √† partir de l'app Express
const server = createServer(app);

// Configuration du port - utilise le port d√©fini dans les variables d'environnement ou 5000 par d√©faut
const PORT = process.env.PORT || 5000;

// ========================================
// CONFIGURATION DES MIDDLEWARES DE S√âCURIT√â
// ========================================

// Helmet : middleware de s√©curit√© qui d√©finit des en-t√™tes HTTP s√©curis√©s
// Prot√®ge contre les attaques XSS, clickjacking, etc.
app.use(helmet());

// ========================================
// CONFIGURATION CORS (Cross-Origin Resource Sharing)
// ========================================

// Liste des domaines autoris√©s √† faire des requ√™tes vers cette API
// CORS est n√©cessaire car l'application mobile (Expo) et l'API sont sur des domaines diff√©rents
const allowedOrigins = [
  // URLs Expo par d√©faut - pour les builds de production et d√©veloppement
  'https://expo.dev',        // Plateforme de d√©veloppement Expo
  'https://exp.host',        // Service de distribution Expo
  'https://snack.expo.io',   // Environnement de test Expo Snack
  
  // URLs de d√©veloppement local - pour tester l'app sur diff√©rents appareils
  'http://localhost:19006',      // Serveur de d√©veloppement Expo local
  'http://192.168.1.25:19006',  // IP locale pour test sur mobile
  'http://192.168.1.25:8081',   // Port alternatif pour le d√©veloppement
  'http://192.168.1.205:19006', // Autre IP locale du r√©seau
  'http://192.168.1.205:8081',  // Port alternatif sur cette IP
  'exp://localhost:8081',       // Protocole Expo pour d√©veloppement local
  'exp://192.168.1.25:8081',    // Protocole Expo pour test sur mobile
  'exp://192.168.1.205:8081'    // Protocole Expo pour test sur autre appareil
];

// Ajouter l'URL frontend principale depuis les variables d'environnement
// Permet de configurer dynamiquement l'URL de production
if (process.env.FRONTEND_URL) {
  allowedOrigins.push(process.env.FRONTEND_URL);
}

// Ajouter des URLs suppl√©mentaires depuis une liste s√©par√©e par des virgules
// Utile pour configurer plusieurs environnements (staging, production, etc.)
if (process.env.FRONTEND_URLS) {
  const additionalUrls = process.env.FRONTEND_URLS.split(',').map(url => url.trim());
  allowedOrigins.push(...additionalUrls);
}

// Afficher la configuration CORS pour le d√©bogage
console.log('üåê CORS configur√© pour les origines:', allowedOrigins);

// Configuration du middleware CORS avec une fonction de validation personnalis√©e
app.use(cors({
  origin: function (origin, callback) {
    // Permettre les requ√™tes sans origin (comme les apps mobiles Expo)
    // Les applications mobiles n'envoient pas toujours d'origin header
    if (!origin) return callback(null, true);
    
    // Permettre automatiquement tous les domaines Expo officiels
    // Cela garantit la compatibilit√© avec tous les environnements Expo
    if (origin.includes('expo.dev') || 
        origin.includes('exp.host') || 
        origin.includes('snack.expo.io') ||
        origin.startsWith('exp://')) {
      return callback(null, true);
    }
    
    // V√©rifier si l'origin est dans la liste des origines autoris√©es
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      console.log('CORS blocked origin:', origin);
      console.log('Allowed origins:', allowedOrigins);
      // En production, √™tre plus permissif pour Expo pour √©viter les probl√®mes de d√©ploiement
      if (process.env.NODE_ENV === 'production') {
        return callback(null, true);
      }
      // En d√©veloppement, bloquer les origines non autoris√©es pour la s√©curit√©
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true, // Permettre l'envoi de cookies et headers d'authentification
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'], // M√©thodes HTTP autoris√©es
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'] // Headers autoris√©s
}));

// ========================================
// CONFIGURATION SOCKET.IO (COMMUNICATION TEMPS R√âEL)
// ========================================

// Cr√©ation du serveur Socket.io pour la messagerie instantan√©e
// Socket.io permet la communication bidirectionnelle en temps r√©el entre le client et le serveur
const io = new Server(server, {
  cors: {
    origin: function (origin, callback) {
      // M√™me logique CORS que pour Express - Socket.io doit respecter les m√™mes r√®gles
      if (!origin) return callback(null, true);
      
      // Permettre automatiquement les domaines Expo officiels
      if (origin.includes('expo.dev') || 
          origin.includes('exp.host') || 
          origin.includes('snack.expo.io') ||
          origin.startsWith('exp://')) {
        return callback(null, true);
      }
      
      // V√©rifier les origines autoris√©es
      if (allowedOrigins.indexOf(origin) !== -1) {
        callback(null, true);
      } else {
        // En production, √™tre plus permissif pour √©viter les probl√®mes de connexion
        if (process.env.NODE_ENV === 'production') {
          return callback(null, true);
        }
        callback(new Error('Not allowed by CORS'));
      }
    },
    credentials: true, // Permettre l'authentification via Socket.io
    methods: ['GET', 'POST'] // M√©thodes HTTP support√©es par Socket.io
  },
  transports: ['websocket', 'polling'], // Types de transport support√©s (WebSocket + fallback HTTP)
  pingTimeout: 60000,    // Temps d'attente avant de consid√©rer une connexion comme ferm√©e (60s)
  pingInterval: 25000    // Intervalle entre les pings pour v√©rifier la connexion (25s)
});

// ========================================
// CONFIGURATION DU RATE LIMITING (LIMITATION DE REQU√äTES)
// ========================================

// Rate limiting g√©n√©ral - prot√®ge contre les attaques DDoS et l'abus d'API
// Limite le nombre de requ√™tes par IP sur une p√©riode donn√©e
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // Fen√™tre de temps : 15 minutes
  max: 500, // Maximum 500 requ√™tes par IP pendant cette fen√™tre (augment√© pour le d√©veloppement)
  message: {
    error: 'Trop de requ√™tes depuis cette IP, veuillez r√©essayer plus tard.'
  }
});
app.use(limiter);

// Rate limiting sp√©cifique pour l'authentification - protection contre les attaques par force brute
// Limite le nombre de tentatives de connexion pour √©viter les attaques de mot de passe
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // Fen√™tre de temps : 15 minutes
  max: 20, // Maximum 20 tentatives de connexion par IP (augment√© pour le d√©veloppement)
  message: {
    error: 'Trop de tentatives de connexion, veuillez r√©essayer plus tard.'
  }
});

// ========================================
// CONFIGURATION DES MIDDLEWARES DE PARSING
// ========================================

// Middleware pour parser les donn√©es JSON des requ√™tes
// Permet de traiter les donn√©es envoy√©es par l'application mobile
app.use(express.json({ limit: '10mb' })); // Limite de 10MB pour les gros fichiers (images, etc.)
// Middleware pour parser les donn√©es de formulaire URL-encoded
app.use(express.urlencoded({ extended: true })); // Support des objets complexes dans les formulaires

// Configuration des sessions pour Passport (temporairement d√©sactiv√©)
// app.use(session({
//   secret: process.env.SESSION_SECRET || 'teamup_session_secret_change_in_production',
//   resave: false,
//   saveUninitialized: false,
//   cookie: {
//     secure: process.env.NODE_ENV === 'production',
//     maxAge: 24 * 60 * 60 * 1000 // 24 heures
//   }
// }));

// Initialisation de Passport (temporairement d√©sactiv√©)
// app.use(passport.initialize());
// app.use(passport.session());

// ========================================
// ROUTES DE BASE ET ENDPOINTS PRINCIPAUX
// ========================================

// Route racine - endpoint de test pour v√©rifier que l'API fonctionne
// Utilis√©e par les services de d√©ploiement (Render) pour v√©rifier la sant√© de l'API
app.get('/', (req, res) => {
  res.json({
    message: 'TeamUp API is running on Render! üèÉ‚Äç‚ôÇÔ∏è‚öΩ',
    version: '1.0.0',
    status: 'active',
    environment: process.env.NODE_ENV || 'development',
    server: 'Render',
    endpoints: {
      auth: '/api/auth',        // Endpoints d'authentification
      events: '/api/events',    // Endpoints de gestion des √©v√©nements
      messages: '/api/messages', // Endpoints de messagerie
      health: '/api/health'     // Endpoint de sant√© de l'API
    },
    cors: {
      enabled: true,
      allowedOrigins: 'Expo EAS Build compatible' // Compatible avec les builds Expo
    }
  });
});

// Route de sant√© d√©taill√©e - endpoint de monitoring pour v√©rifier l'√©tat de l'API
// Utilis√©e par les outils de monitoring et les health checks
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(), // Timestamp de la requ√™te
    uptime: process.uptime(),            // Temps de fonctionnement du serveur en secondes
    environment: process.env.NODE_ENV || 'development',
    server: 'Render',
    database: 'MongoDB Atlas connected', // √âtat de la connexion √† la base de donn√©es
    cors: 'Expo EAS Build ready'         // Configuration CORS pr√™te pour Expo
  });
});

// ========================================
// CONFIGURATION DES ROUTES API
// ========================================

// Routes d'authentification avec rate limiting appliqu√©
// Toutes les routes /api/auth/* sont prot√©g√©es par le rate limiting sp√©cifique
app.use('/api/auth', authLimiter, authRoutes);

// Routes OAuth (temporairement d√©sactiv√© - pour l'authentification Google/Facebook)
// app.use('/api/auth', oauthRoutes);

// Routes des √©v√©nements - gestion compl√®te des √©v√©nements sportifs
// Inclut : cr√©ation, modification, suppression, recherche, participation
app.use('/api/events', eventRoutes);

// Routes des notifications d'√©v√©nements - syst√®me de notifications push
// G√®re l'envoi de notifications aux participants d'√©v√©nements
app.use('/api/events', require('./routes/events-notifications'));

// Routes des statistiques d'√©v√©nements - donn√©es analytiques
// Fournit des statistiques sur les √©v√©nements et les participants
app.use('/api/events', require('./routes/events-stats'));

// Routes de classement - syst√®me de points et classements utilisateurs
// G√®re le syst√®me de r√©putation et de classement des joueurs
app.use('/api/ranking', require('./routes/ranking'));

// Routes d'avis - syst√®me d'√©valuation des utilisateurs
// Permet aux utilisateurs de noter et commenter les autres joueurs
app.use('/api/reviews', require('./routes/reviews'));

// Routes de messagerie - communication entre utilisateurs
// G√®re l'envoi et la r√©ception de messages priv√©s
app.use('/api/messages', messageRoutes);

// Routes des utilisateurs - gestion des profils
// Inclut : modification de profil, r√©cup√©ration d'informations utilisateur
app.use('/api/users', userRoutes);

// ========================================
// INITIALISATION DES SERVICES
// ========================================

// Initialiser le service Socket.io apr√®s la configuration CORS
// Socket.io g√®re la communication temps r√©el pour la messagerie
socketService.initialize(io);

// ========================================
// MIDDLEWARE DE GESTION D'ERREURS
// ========================================

// Middleware global pour capturer et traiter toutes les erreurs non g√©r√©es
// Doit √™tre plac√© apr√®s toutes les routes pour capturer les erreurs
app.use((err, req, res, next) => {
  console.error(err.stack);
  
  // Erreur de validation Mongoose - donn√©es invalides envoy√©es √† la base de donn√©es
  if (err.name === 'ValidationError') {
    const errors = Object.values(err.errors).map(e => e.message);
    return res.status(400).json({
      error: 'Erreur de validation',
      details: errors
    });
  }
  
  // Erreur de duplication MongoDB - tentative d'insertion d'une valeur unique d√©j√† existante
  if (err.code === 11000) {
    const field = Object.keys(err.keyValue)[0];
    return res.status(400).json({
      error: `${field} d√©j√† utilis√©`,
      details: [`Ce ${field} existe d√©j√†`]
    });
  }
  
  // Erreur JWT - token d'authentification invalide ou expir√©
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({
      error: 'Token invalide'
    });
  }
  
  // Erreur par d√©faut - toutes les autres erreurs non sp√©cifiques
  res.status(500).json({
    error: 'Erreur interne du serveur',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Une erreur est survenue'
  });
});

// ========================================
// MIDDLEWARE POUR ROUTES NON TROUV√âES
// ========================================

// Middleware pour g√©rer les routes qui n'existent pas (404)
// Doit √™tre plac√© en dernier, apr√®s toutes les autres routes
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route non trouv√©e',
    message: `La route ${req.originalUrl} n'existe pas`
  });
});

// ========================================
// FONCTION DE D√âMARRAGE DU SERVEUR
// ========================================

// Fonction asynchrone pour initialiser et d√©marrer le serveur
// Effectue toutes les v√©rifications n√©cessaires avant de lancer l'API
const startServer = async () => {
  try {
    // ========================================
    // V√âRIFICATION DES VARIABLES D'ENVIRONNEMENT
    // ========================================
    
    console.log('üîß V√©rification des variables d\'environnement...');
    
    // Liste des variables d'environnement critiques pour le fonctionnement de l'API
    const requiredEnvVars = ['MONGODB_URI', 'JWT_SECRET'];
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    // Arr√™ter le serveur si des variables critiques sont manquantes
    if (missingVars.length > 0) {
      console.error('‚ùå Variables d\'environnement manquantes:', missingVars.join(', '));
      console.error('‚ùå Assurez-vous que le fichier .env est configur√© correctement');
      process.exit(1);
    }
    
    console.log('‚úÖ Variables d\'environnement valid√©es');
    
    // ========================================
    // CONNEXION √Ä LA BASE DE DONN√âES
    // ========================================
    
    // √âtablir la connexion √† MongoDB Atlas
    await connectDB();
    
    // ========================================
    // INITIALISATION DE LA BASE DE DONN√âES
    // ========================================
    
    // Initialiser les index et nettoyer la base de donn√©es apr√®s un d√©lai
    // Le d√©lai permet √† la connexion de se stabiliser
    setTimeout(async () => {
      await initializeIndexes();  // Cr√©er les index pour optimiser les requ√™tes
      await cleanupDatabase();    // Nettoyer les donn√©es obsol√®tes
    }, 2000);
    
    // ========================================
    // D√âMARRAGE DU SERVEUR HTTP
    // ========================================
    
    // Lancer le serveur sur le port configur√©
    // '0.0.0.0' permet d'accepter les connexions depuis toutes les interfaces r√©seau
    server.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ TeamUp API d√©marr√©!`);
      console.log(`üìç Port: ${PORT}`);
      console.log(`üåç Host: 0.0.0.0`);
      console.log(`üåü Environnement: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üè• Health check: /api/health`);
      console.log(`üîê Auth API: /api/auth`);
      console.log(`‚öΩ Events API: /api/events`);
      console.log(`üí¨ Messages API: /api/messages`);
      console.log(`üîå Socket.io: Messagerie temps r√©el activ√©e`);
      console.log(`üíæ Database: MongoDB Atlas`);
      console.log(`üìß Email: ${process.env.EMAIL_USER ? 'Configur√©' : 'Non configur√©'}`);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

// ========================================
// GESTION DES SIGNAUX DE FERMETURE
// ========================================

// Gestionnaire pour le signal SIGTERM (arr√™t propre du serveur)
// Utilis√© par les plateformes de d√©ploiement comme Render pour arr√™ter le serveur
process.on('SIGTERM', () => {
  console.log('SIGTERM re√ßu, fermeture gracieuse du serveur...');
  // Fermer la connexion √† MongoDB avant d'arr√™ter le serveur
  mongoose.connection.close(() => {
    console.log('Connexion MongoDB ferm√©e');
    process.exit(0);
  });
});

// Gestionnaire pour le signal SIGINT (Ctrl+C)
// Permet d'arr√™ter le serveur proprement en d√©veloppement
process.on('SIGINT', () => {
  console.log('SIGINT re√ßu, fermeture gracieuse du serveur...');
  // Fermer la connexion √† MongoDB avant d'arr√™ter le serveur
  mongoose.connection.close(() => {
    console.log('Connexion MongoDB ferm√©e');
    process.exit(0);
  });
});

// ========================================
// D√âMARRAGE DE L'APPLICATION
// ========================================

// Lancer la fonction de d√©marrage du serveur
// catch(console.error) affiche les erreurs non g√©r√©es dans la console
startServer().catch(console.error); 