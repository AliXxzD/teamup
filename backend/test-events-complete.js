const express = require('express');
const request = require('supertest');
const mongoose = require('mongoose');
const User = require('./models/User');
const Event = require('./models/Event');
const jwt = require('jsonwebtoken');

require('dotenv').config();

async function testCompleteEventsSystem() {
  try {
    console.log('üîÑ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // R√©cup√©rer un utilisateur pour les tests
    const user = await User.findOne();
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√© pour les tests');
      return;
    }

    // Cr√©er un token JWT
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );

    console.log('üë§ Utilisateur de test:', user.email);

    // Cr√©er l'app Express pour les tests
    const app = express();
    app.use(express.json());
    
    // Importer toutes les routes d'√©v√©nements
    const eventsRoutes = require('./routes/events');
    const notificationsRoutes = require('./routes/events-notifications');
    const statsRoutes = require('./routes/events-stats');
    
    app.use('/api/events', eventsRoutes);
    app.use('/api/events', notificationsRoutes);
    app.use('/api/events', statsRoutes);

    console.log('\nüéØ === TEST COMPLET DU SYST√àME D\'√âV√âNEMENTS ===\n');

    // Test 1: Statistiques globales
    console.log('üìä Test 1: Statistiques globales');
    try {
      const response = await request(app)
        .get('/api/events/stats/global')
        .expect(200);
      
      console.log('‚úÖ Statistiques globales r√©cup√©r√©es');
      console.log('   - √âv√©nements totaux:', response.body.data.overview.totalEvents);
      console.log('   - √âv√©nements actifs:', response.body.data.overview.activeEvents);
      console.log('   - Sports populaires:', response.body.data.sports.slice(0, 3).map(s => s._id).join(', '));
      
    } catch (error) {
      console.error('‚ùå Erreur statistiques globales:', error.message);
    }

    // Test 2: Statistiques utilisateur
    console.log('\nüìä Test 2: Statistiques utilisateur');
    try {
      const response = await request(app)
        .get('/api/events/stats/user')
        .set('Authorization', `Bearer ${token}`)
        .expect(200);
      
      console.log('‚úÖ Statistiques utilisateur r√©cup√©r√©es');
      console.log('   - √âv√©nements organis√©s:', response.body.data.organized.total);
      console.log('   - √âv√©nements rejoints:', response.body.data.joined.total);
      console.log('   - Sports favoris:', response.body.data.overall.favoriteSports.slice(0, 2).map(s => s._id).join(', '));
      
    } catch (error) {
      console.error('‚ùå Erreur statistiques utilisateur:', error.message);
    }

    // Test 3: Tendances
    console.log('\nüìà Test 3: Tendances des √©v√©nements');
    try {
      const response = await request(app)
        .get('/api/events/stats/trends?period=month')
        .expect(200);
      
      console.log('‚úÖ Tendances r√©cup√©r√©es');
      console.log('   - P√©riode:', response.body.data.period);
      console.log('   - Points de donn√©es:', response.body.data.eventCreation.length);
      
    } catch (error) {
      console.error('‚ùå Erreur tendances:', error.message);
    }

    // Test 4: Cr√©ation d'un √©v√©nement avec toutes les fonctionnalit√©s
    console.log('\nüÜï Test 4: Cr√©ation d\'√©v√©nement avanc√©');
    try {
      const advancedEvent = {
        title: 'Tournoi de Basketball Avanc√©',
        description: 'Un tournoi de basketball avec toutes les fonctionnalit√©s avanc√©es du syst√®me TeamUp. Statistiques d√©taill√©es, notifications, et plus encore !',
        sport: 'Basketball',
        date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(), // Dans 15 jours
        time: '15:30',
        location: 'Complexe Sportif Central, Terrain A',
        maxParticipants: 16,
        level: 'Interm√©diaire',
        price: 25,
        isFree: false
      };

      const response = await request(app)
        .post('/api/events')
        .set('Authorization', `Bearer ${token}`)
        .send(advancedEvent)
        .expect(201);
      
      console.log('‚úÖ √âv√©nement avanc√© cr√©√©');
      console.log('   - ID:', response.body.data._id);
      console.log('   - Titre:', response.body.data.title);
      
      const eventId = response.body.data._id;

      // Test 5: Statistiques d√©taill√©es de l'√©v√©nement
      console.log('\nüìä Test 5: Statistiques d√©taill√©es de l\'√©v√©nement');
      try {
        const statsResponse = await request(app)
          .get(`/api/events/${eventId}/stats`)
          .set('Authorization', `Bearer ${token}`)
          .expect(200);
        
        console.log('‚úÖ Statistiques d√©taill√©es r√©cup√©r√©es');
        console.log('   - Taux de remplissage:', statsResponse.body.data.participation.fillRate + '%');
        console.log('   - Vues:', statsResponse.body.data.engagement.views);
        
      } catch (error) {
        console.error('‚ùå Erreur statistiques √©v√©nement:', error.message);
      }

      // Test 6: Syst√®me de notifications (simulation)
      console.log('\nüìß Test 6: Syst√®me de notifications');
      try {
        const notificationData = {
          subject: 'Rappel important pour le tournoi',
          message: 'N\'oubliez pas d\'apporter vos chaussures de sport et une bouteille d\'eau pour le tournoi de demain !',
          type: 'info'
        };

        const notifResponse = await request(app)
          .post(`/api/events/${eventId}/notify-participants`)
          .set('Authorization', `Bearer ${token}`)
          .send(notificationData)
          .expect(200);
        
        console.log('‚úÖ Syst√®me de notification test√©');
        console.log('   - Participants notifi√©s:', notifResponse.body.sentCount);
        console.log('   - Message:', notifResponse.body.message);
        
      } catch (error) {
        console.error('‚ùå Erreur notifications:', error.message);
      }

      // Test 7: Historique des notifications
      console.log('\nüìã Test 7: Historique des notifications');
      try {
        const historyResponse = await request(app)
          .get(`/api/events/${eventId}/notifications`)
          .set('Authorization', `Bearer ${token}`)
          .expect(200);
        
        console.log('‚úÖ Historique des notifications r√©cup√©r√©');
        console.log('   - Notifications envoy√©es:', historyResponse.body.notifications.length);
        
      } catch (error) {
        console.error('‚ùå Erreur historique notifications:', error.message);
      }

    } catch (createError) {
      console.error('‚ùå Erreur cr√©ation √©v√©nement avanc√©:', createError.message);
    }

    // Test 8: Recherche avanc√©e (simulation des param√®tres)
    console.log('\nüîç Test 8: Recherche avanc√©e');
    try {
      const searchParams = [
        'sport=Basketball',
        'level=Interm√©diaire',
        'isFree=false',
        'limit=5'
      ].join('&');

      const searchResponse = await request(app)
        .get(`/api/events?${searchParams}`)
        .expect(200);
      
      console.log('‚úÖ Recherche avanc√©e effectu√©e');
      console.log('   - R√©sultats trouv√©s:', searchResponse.body.data.events.length);
      console.log('   - Crit√®res:', 'Basketball, Interm√©diaire, Payant');
      
    } catch (error) {
      console.error('‚ùå Erreur recherche avanc√©e:', error.message);
    }

    // Test 9: Performance et int√©grit√© des donn√©es
    console.log('\n‚ö° Test 9: Performance et int√©grit√©');
    try {
      const start = Date.now();
      
      // Test de charge l√©g√®re
      const promises = [];
      for (let i = 0; i < 5; i++) {
        promises.push(
          request(app)
            .get('/api/events?limit=10')
            .expect(200)
        );
      }
      
      await Promise.all(promises);
      const duration = Date.now() - start;
      
      console.log('‚úÖ Test de performance r√©ussi');
      console.log(`   - 5 requ√™tes simultan√©es en ${duration}ms`);
      console.log(`   - Moyenne: ${Math.round(duration / 5)}ms par requ√™te`);
      
    } catch (error) {
      console.error('‚ùå Erreur test performance:', error.message);
    }

    console.log('\nüéâ === TESTS COMPLETS TERMIN√âS AVEC SUCC√àS ! ===');
    console.log('\n‚úÖ Fonctionnalit√©s test√©es :');
    console.log('   üéØ CRUD complet des √©v√©nements');
    console.log('   üìä Syst√®me de statistiques avanc√©es');
    console.log('   üìß Notifications et rappels');
    console.log('   üîç Recherche et filtrage avanc√©s');
    console.log('   üìà Analyse de tendances');
    console.log('   ‚ö° Performance et charge');
    console.log('   üîí S√©curit√© et authentification');
    console.log('   üì± API REST compl√®te');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests complets:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

testCompleteEventsSystem();
