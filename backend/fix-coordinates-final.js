/**
 * Script final pour corriger toutes les coordonn√©es
 */

const mongoose = require('mongoose');
const Event = require('./models/Event');
const geocodingService = require('./services/geocodingService');
require('dotenv').config();

async function fixAllCoordinates() {
  try {
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb+srv://root:root@teamup.7fqehdy.mongodb.net/teamup?retryWrites=true&w=majority&appName=teamup';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // 1. Supprimer tous les champs coordinates corrompus
    console.log('\nüßπ Nettoyage des coordonn√©es corrompues...');
    const cleanResult = await Event.updateMany(
      {},
      {
        $unset: {
          'location.coordinates': 1
        }
      }
    );
    console.log(`‚úÖ ${cleanResult.modifiedCount} √©v√©nements nettoy√©s`);

    // 2. Recr√©er l'index
    console.log('\nüîß Recr√©ation de l\'index g√©ospatial...');
    try {
      await Event.collection.dropIndex('location.coordinates_2dsphere');
    } catch (error) {
      console.log('‚ö†Ô∏è Ancien index non trouv√©');
    }
    await Event.collection.createIndex({ 'location.coordinates': '2dsphere' });
    console.log('‚úÖ Index g√©ospatial cr√©√©');

    // 3. R√©geocoder tous les √©v√©nements avec des adresses valides
    const allEvents = await Event.find({});
    console.log(`\nüó∫Ô∏è G√©ocodage de ${allEvents.length} √©v√©nements...`);

    let successCount = 0;
    let failCount = 0;
    let skippedCount = 0;

    for (let i = 0; i < allEvents.length; i++) {
      const event = allEvents[i];
      const address = event.location?.address;

      console.log(`\n${i + 1}/${allEvents.length} - ${event.title}`);
      console.log(`üìç Adresse: ${address}`);

      if (!address || address.length < 5) {
        console.log('‚è≠Ô∏è Adresse trop courte, ignor√©');
        skippedCount++;
        continue;
      }

      const quality = geocodingService.estimateAddressQuality(address);
      if (quality < 2) {
        console.log(`‚è≠Ô∏è Qualit√© insuffisante (${quality}/5), ignor√©`);
        skippedCount++;
        continue;
      }

      try {
        const geocodeResult = await geocodingService.geocode(address);
        
        if (geocodeResult && geocodeResult.latitude && geocodeResult.longitude) {
          // Format GeoJSON correct
          const geoJSONCoords = {
            type: 'Point',
            coordinates: [geocodeResult.longitude, geocodeResult.latitude] // [lng, lat]
          };

          await Event.updateOne(
            { _id: event._id },
            {
              $set: {
                'location.coordinates': geoJSONCoords
              }
            }
          );

          console.log(`‚úÖ Coordonn√©es ajout√©es: [${geocodeResult.longitude}, ${geocodeResult.latitude}]`);
          successCount++;
        } else {
          console.log('‚ùå G√©ocodage √©chou√©');
          failCount++;
        }

        // Pause pour respecter les limites de l'API
        if (i < allEvents.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }

      } catch (error) {
        console.log(`‚ùå Erreur: ${error.message}`);
        failCount++;
      }
    }

    console.log('\nüìä R√©sultats finaux:');
    console.log('=' .repeat(50));
    console.log(`‚úÖ Succ√®s: ${successCount}`);
    console.log(`‚ùå √âchecs: ${failCount}`);
    console.log(`‚è≠Ô∏è Ignor√©s: ${skippedCount}`);

    // 4. Test final de la recherche par proximit√©
    console.log('\nüîç Test final de recherche par proximit√©...');
    
    // Coordonn√©es de Drancy (o√π devraient √™tre nos √©v√©nements)
    const drancyCoords = { longitude: 2.453889, latitude: 48.92306 };
    
    try {
      const nearbyEvents = await Event.findWithDistance(
        drancyCoords.longitude,
        drancyCoords.latitude,
        50000 // 50km
      );

      console.log(`üéâ ${nearbyEvents.length} √©v√©nements trouv√©s avec recherche par proximit√© !`);
      nearbyEvents.forEach(event => {
        console.log(`   - ${event.title} (${event.distanceKm}km)`);
      });

      if (nearbyEvents.length > 0) {
        console.log('\n‚úÖ LA RECHERCHE PAR PROXIMIT√â FONCTIONNE MAINTENANT ! üéâ');
      }

    } catch (error) {
      console.log(`‚ùå Erreur test proximit√©: ${error.message}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîö Correction termin√©e');
  }
}

// Ex√©cuter la correction
if (require.main === module) {
  console.log('üöÄ Correction finale des coordonn√©es');
  console.log('=' .repeat(50));
  
  fixAllCoordinates().catch(console.error);
}

module.exports = { fixAllCoordinates };


