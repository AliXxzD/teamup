/**
 * Test du syst√®me de points r√©els avec les donn√©es utilisateur
 */

const mongoose = require('mongoose');
const User = require('./models/User');
const Event = require('./models/Event');
require('dotenv').config();

async function testRealPointsSystem() {
  try {
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb+srv://root:root@teamup.7fqehdy.mongodb.net/teamup?retryWrites=true&w=majority&appName=teamup';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // R√©cup√©rer tous les utilisateurs
    const users = await User.find().limit(5);
    console.log(`\nüìä ${users.length} utilisateurs trouv√©s`);

    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√©');
      return;
    }

    console.log('\nüßÆ Calcul des points r√©els pour chaque utilisateur:');
    console.log('=' .repeat(80));

    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      console.log(`\n${i + 1}. ${user.name} (${user.email})`);
      
      // Calculer les vraies statistiques
      await user.calculateRealStats();
      
      const stats = user.profile?.stats || {};
      console.log('üìà Statistiques:');
      console.log(`   - √âv√©nements organis√©s: ${stats.eventsOrganized || 0}`);
      console.log(`   - √âv√©nements rejoints: ${stats.eventsJoined || 0}`);
      console.log(`   - Note moyenne: ${stats.averageRating || 0}`);
      console.log(`   - Nombre d'√©valuations: ${stats.totalRatings || 0}`);
      console.log(`   - Email v√©rifi√©: ${user.isEmailVerified ? 'Oui' : 'Non'}`);
      
      // Calculer l'anciennet√©
      const registrationDate = stats.registrationDate || user.createdAt;
      const daysSinceRegistration = Math.floor((Date.now() - registrationDate.getTime()) / (1000 * 60 * 60 * 24));
      console.log(`   - Membre depuis: ${daysSinceRegistration} jours`);

      // Calculer les points selon notre syst√®me
      let totalPoints = 0;
      
      // Points √©v√©nements organis√©s
      const organizedPoints = (stats.eventsOrganized || 0) * 50;
      totalPoints += organizedPoints;
      
      // Points √©v√©nements rejoints
      const joinedPoints = (stats.eventsJoined || 0) * 20;
      totalPoints += joinedPoints;
      
      // Bonus note moyenne
      const ratingBonus = stats.averageRating && stats.totalRatings > 0 
        ? Math.round((stats.averageRating / 5) * 500)
        : 0;
      totalPoints += ratingBonus;
      
      // Bonus anciennet√©
      const anciennetyBonus = Math.min(daysSinceRegistration, 365);
      totalPoints += anciennetyBonus;
      
      // Bonus email v√©rifi√©
      const emailBonus = user.isEmailVerified ? 100 : 0;
      totalPoints += emailBonus;

      console.log('\nüí∞ Calcul des points:');
      console.log(`   - √âv√©nements organis√©s: ${organizedPoints} pts (${stats.eventsOrganized || 0} √ó 50)`);
      console.log(`   - √âv√©nements rejoints: ${joinedPoints} pts (${stats.eventsJoined || 0} √ó 20)`);
      console.log(`   - Bonus note moyenne: ${ratingBonus} pts`);
      console.log(`   - Bonus anciennet√©: ${anciennetyBonus} pts`);
      console.log(`   - Bonus email: ${emailBonus} pts`);
      console.log(`   üìä TOTAL: ${totalPoints} points`);

      // Calculer le niveau
      let level = 1;
      if (totalPoints >= 100) level = 2;
      if (totalPoints >= 300) level = 3;
      if (totalPoints >= 600) level = 4;
      if (totalPoints >= 1000) level = 5;
      if (totalPoints >= 1500) level = 6;
      if (totalPoints >= 2200) level = 7;
      if (totalPoints >= 3000) level = 8;
      if (totalPoints >= 4000) level = 9;
      if (totalPoints >= 5500) level = 10;
      
      if (totalPoints >= 7500) {
        level = 10 + Math.floor((totalPoints - 7500) / 1000);
      }

      const levelTitles = {
        1: 'D√©butant', 2: 'Novice', 3: 'Apprenti', 4: 'Sportif', 5: 'Athl√®te',
        6: 'Comp√©titeur', 7: 'Expert', 8: 'Champion', 9: 'Ma√Ætre', 10: 'L√©gende'
      };
      
      const levelTitle = levelTitles[level] || (level <= 20 ? 'Elite' : level <= 30 ? 'Pro' : level <= 40 ? 'Superstar' : 'Immortel');

      console.log(`üèÜ Niveau: ${level} (${levelTitle})`);

      // Calculer les achievements
      const achievements = [];
      
      if ((stats.eventsOrganized || 0) >= 1) {
        achievements.push('Premier Organisateur');
      }
      if ((stats.eventsOrganized || 0) >= 5) {
        achievements.push('Organisateur Actif');
      }
      if ((stats.eventsJoined || 0) >= 10) {
        achievements.push('Sportif R√©gulier');
      }
      if (stats.averageRating >= 4.5 && stats.totalRatings >= 5) {
        achievements.push('Tr√®s Appr√©ci√©');
      }
      if (user.isEmailVerified) {
        achievements.push('Compte V√©rifi√©');
      }
      if (daysSinceRegistration >= 30) {
        achievements.push('Membre Fid√®le');
      }

      console.log(`üéñÔ∏è Achievements d√©bloqu√©s: ${achievements.length}`);
      achievements.forEach(achievement => {
        console.log(`   ‚úÖ ${achievement}`);
      });

      // Mettre √† jour les points dans le profil utilisateur
      if (!user.profile) user.profile = {};
      user.profile.points = totalPoints;
      user.profile.level = level;
      
      await user.save();
      console.log('‚úÖ Points mis √† jour dans la base de donn√©es');
    }

    console.log('\nüéØ R√©sum√© du test:');
    console.log('- Tous les utilisateurs ont maintenant des points r√©els');
    console.log('- Les niveaux sont calcul√©s selon les activit√©s');
    console.log('- Les achievements refl√®tent les vraies r√©alisations');
    console.log('- Le Dashboard affichera maintenant les vraies donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîö Test termin√©');
  }
}

// Ex√©cuter le test
if (require.main === module) {
  console.log('üöÄ Test du syst√®me de points r√©els');
  console.log('=' .repeat(50));
  
  testRealPointsSystem().catch(console.error);
}

module.exports = { testRealPointsSystem };

