const mongoose = require('mongoose');
const User = require('./models/User');
require('dotenv').config();

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/teamup';

async function updateAllUserStats() {
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion r√©ussie');

    console.log('üë• R√©cup√©ration de tous les utilisateurs...');
    const users = await User.find({});
    console.log(`üìä ${users.length} utilisateurs trouv√©s`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        console.log(`üîÑ Mise √† jour des statistiques pour ${user.name} (${user.email})...`);
        
        const stats = await user.calculateRealStats();
        
        console.log(`‚úÖ Statistiques mises √† jour pour ${user.name}:`);
        console.log(`   - √âv√©nements organis√©s: ${stats.eventsOrganized}`);
        console.log(`   - √âv√©nements rejoints: ${stats.eventsJoined}`);
        console.log(`   - Note moyenne: ${stats.averageRating}`);
        console.log(`   - Nombre d'√©valuations: ${stats.totalRatings}`);
        
        updatedCount++;
      } catch (error) {
        console.error(`‚ùå Erreur pour ${user.name}:`, error.message);
        errorCount++;
      }
    }

    console.log('\nüéâ Mise √† jour termin√©e !');
    console.log(`‚úÖ ${updatedCount} utilisateurs mis √† jour avec succ√®s`);
    console.log(`‚ùå ${errorCount} erreurs rencontr√©es`);

    // Afficher un r√©sum√© des statistiques
    console.log('\nüìä R√©sum√© des statistiques:');
    const allUsers = await User.find({});
    const totalStats = {
      eventsOrganized: 0,
      eventsJoined: 0,
      averageRating: 0,
      totalRatings: 0
    };

    allUsers.forEach(user => {
      if (user.profile?.stats) {
        totalStats.eventsOrganized += user.profile.stats.eventsOrganized || 0;
        totalStats.eventsJoined += user.profile.stats.eventsJoined || 0;
        totalStats.totalRatings += user.profile.stats.totalRatings || 0;
      }
    });

    const usersWithRatings = allUsers.filter(user => 
      user.profile?.stats?.totalRatings > 0
    );

    if (usersWithRatings.length > 0) {
      const totalRating = usersWithRatings.reduce((sum, user) => 
        sum + (user.profile.stats.averageRating * user.profile.stats.totalRatings), 0
      );
      const totalRatingCount = usersWithRatings.reduce((sum, user) => 
        sum + user.profile.stats.totalRatings, 0
      );
      totalStats.averageRating = totalRatingCount > 0 ? totalRating / totalRatingCount : 0;
    }

    console.log(`   - Total √©v√©nements organis√©s: ${totalStats.eventsOrganized}`);
    console.log(`   - Total √©v√©nements rejoints: ${totalStats.eventsJoined}`);
    console.log(`   - Note moyenne globale: ${totalStats.averageRating.toFixed(1)}`);
    console.log(`   - Total √©valuations: ${totalStats.totalRatings}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de la base de donn√©es');
  }
}

// Ex√©cuter le script
updateAllUserStats().catch(console.error); 