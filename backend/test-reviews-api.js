const mongoose = require('mongoose');
const Review = require('./models/Review');
const User = require('./models/User');
const Event = require('./models/Event');

// Configuration de la base de donn√©es
require('dotenv').config();
const MONGODB_URI = process.env.MONGODB_URI;

async function testReviewsAPI() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('üîó Connect√© √† MongoDB');

    // Test 1: V√©rifier les avis existants
    console.log('\nüìä Test 1: Avis existants dans la base de donn√©es');
    const allReviews = await Review.find({}).populate('reviewer reviewedUser event', 'name title');
    console.log(`Total des avis: ${allReviews.length}`);
    
    allReviews.forEach((review, index) => {
      console.log(`  ${index + 1}. ${review.reviewer?.name} ‚Üí ${review.reviewedUser?.name}`);
      console.log(`     Note: ${review.rating}/5, Type: ${review.type}`);
      console.log(`     √âv√©nement: ${review.event?.title || 'Aucun'}`);
      console.log(`     Commentaire: ${review.comment?.substring(0, 50) || 'Aucun'}...`);
    });

    // Test 2: V√©rifier les statistiques d'un utilisateur sp√©cifique
    console.log('\nüìä Test 2: Statistiques d\'un utilisateur');
    const testUserId = '68c1cc87774207ec38d6f276'; // ID de l'organisateur
    
    const user = await User.findById(testUserId);
    if (user) {
      console.log(`Utilisateur: ${user.name} (${user.email})`);
      
      const stats = await Review.getUserStats(testUserId);
      console.log('Statistiques:', stats);
      
      const reviews = await Review.getUserReviews(testUserId, 1, 5);
      console.log(`Avis re√ßus: ${reviews.length}`);
      reviews.forEach((review, index) => {
        console.log(`  ${index + 1}. ${review.reviewer?.name}: ${review.rating}/5`);
        console.log(`     ${review.comment?.substring(0, 50) || 'Aucun commentaire'}...`);
      });
    } else {
      console.log('‚ùå Utilisateur non trouv√©');
    }

    // Test 3: V√©rifier les avis li√©s √† un √©v√©nement
    console.log('\nüìä Test 3: Avis li√©s √† un √©v√©nement');
    const testEventId = '68c1d14c774207ec38d6f31a'; // ID de l'√©v√©nement
    
    const event = await Event.findById(testEventId);
    if (event) {
      console.log(`√âv√©nement: ${event.title}`);
      console.log(`Organisateur: ${event.organizer}`);
      
      const eventReviews = await Review.find({ event: testEventId }).populate('reviewer', 'name');
      console.log(`Avis pour cet √©v√©nement: ${eventReviews.length}`);
      eventReviews.forEach((review, index) => {
        console.log(`  ${index + 1}. ${review.reviewer?.name}: ${review.rating}/5 (${review.type})`);
      });
    } else {
      console.log('‚ùå √âv√©nement non trouv√©');
    }

    // Test 4: Cr√©er un avis de test
    console.log('\nüìä Test 4: Cr√©ation d\'un avis de test');
    const reviewerId = '68c20d808961dc9135e60f98'; // ID du participant
    const reviewedUserId = '68c1cc87774207ec38d6f276'; // ID de l'organisateur
    
    // V√©rifier si l'avis existe d√©j√†
    const existingReview = await Review.findOne({
      reviewer: reviewerId,
      reviewedUser: reviewedUserId,
      event: testEventId
    });
    
    if (existingReview) {
      console.log('‚úÖ Avis d√©j√† existant:', existingReview.rating, existingReview.comment);
    } else {
      console.log('‚ÑπÔ∏è Aucun avis existant, cr√©ation d\'un avis de test...');
      
      const testReview = await Review.createReview({
        reviewer: reviewerId,
        reviewedUser: reviewedUserId,
        event: testEventId,
        rating: 5,
        comment: 'Excellent organisateur ! √âv√©nement tr√®s bien organis√©.',
        type: 'organizer'
      });
      
      console.log('‚úÖ Avis de test cr√©√©:', testReview._id);
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

testReviewsAPI();

