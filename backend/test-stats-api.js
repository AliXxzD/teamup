const mongoose = require('mongoose');
const User = require('./models/User');
require('dotenv').config();

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/teamup';

async function testStatsAPI() {
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion r√©ussie');

    console.log('\nüìä Test des statistiques via l\'API...');

    // R√©cup√©rer tous les utilisateurs
    const users = await User.find({});
    console.log(`üë• ${users.length} utilisateurs trouv√©s`);

    for (const user of users) {
      console.log(`\nüë§ Test pour: ${user.name} (${user.email})`);
      
      try {
        // Tester la m√©thode getPublicProfileWithRealStats
        const profile = await user.getPublicProfileWithRealStats();
        
        console.log('‚úÖ Profil avec statistiques r√©elles:');
        console.log(`   - ID: ${profile.id}`);
        console.log(`   - Nom: ${profile.name}`);
        console.log(`   - Username: ${profile.username}`);
        console.log(`   - √âv√©nements organis√©s: ${profile.stats.eventsOrganized}`);
        console.log(`   - √âv√©nements rejoints: ${profile.stats.eventsJoined}`);
        console.log(`   - Note moyenne: ${profile.stats.averageRating}`);
        console.log(`   - Nombre d'√©valuations: ${profile.stats.totalRatings}`);
        
        // V√©rifier que les statistiques sont coh√©rentes
        if (profile.stats.eventsOrganized >= 0 && profile.stats.eventsJoined >= 0) {
          console.log('‚úÖ Statistiques valides');
        } else {
          console.log('‚ùå Statistiques invalides');
        }
        
      } catch (error) {
        console.error(`‚ùå Erreur pour ${user.name}:`, error.message);
      }
    }

    // Test sp√©cifique pour un utilisateur avec des √©v√©nements
    console.log('\nüéØ Test sp√©cifique pour un utilisateur avec des √©v√©nements...');
    const userWithEvents = await User.findOne({
      $or: [
        { 'profile.stats.eventsOrganized': { $gt: 0 } },
        { 'profile.stats.eventsJoined': { $gt: 0 } }
      ]
    });

    if (userWithEvents) {
      console.log(`üë§ Utilisateur avec √©v√©nements: ${userWithEvents.name}`);
      
      const profile = await userWithEvents.getPublicProfileWithRealStats();
      
      console.log('üìä D√©tails des statistiques:');
      console.log(`   - √âv√©nements organis√©s: ${profile.stats.eventsOrganized}`);
      console.log(`   - √âv√©nements rejoints: ${profile.stats.eventsJoined}`);
      
      // V√©rifier la coh√©rence
      const totalEvents = profile.stats.eventsOrganized + profile.stats.eventsJoined;
      console.log(`   - Total √©v√©nements: ${totalEvents}`);
      
      if (totalEvents > 0) {
        console.log('‚úÖ Utilisateur actif avec des √©v√©nements');
      } else {
        console.log('‚ö†Ô∏è Utilisateur sans √©v√©nements');
      }
    } else {
      console.log('‚ö†Ô∏è Aucun utilisateur avec des √©v√©nements trouv√©');
    }

    // Test de performance
    console.log('\n‚ö° Test de performance...');
    const startTime = Date.now();
    
    for (let i = 0; i < 10; i++) {
      const user = users[Math.floor(Math.random() * users.length)];
      await user.getPublicProfileWithRealStats();
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚è±Ô∏è Temps moyen par requ√™te: ${duration / 10}ms`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå D√©connexion de la base de donn√©es');
  }
}

// Ex√©cuter le script
testStatsAPI().catch(console.error); 